version: 2.1

orbs:
  kubernetes: smartnews/kubernetes@2
  aws-cli: circleci/aws-cli@2.0.3

executors:
  docker-small:
    docker:
      - image: cimg/base:stable
  kubernetes:
    docker:
      - image: 165463520094.dkr.ecr.ap-northeast-1.amazonaws.com/circleci-orbs/kubernetes:3

commands:
  setup-prd-variables:
    steps:
      - run:
          name: Setup prd variables
          command: |
            echo "export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" >> $BASH_ENV
            echo "export EKS_CLUSTER_NAME=common-0" >> $BASH_ENV
            export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
            export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}

  ecr-login:
    steps:
      - run:
          name: Login ECR
          command: |
            aws ecr get-login-password --region ap-northeast-1 \
              | docker login --username AWS --password-stdin 165463520094.dkr.ecr.ap-northeast-1.amazonaws.com

jobs:
  mirror-images:
    executor: docker-small
    resource_class: medium
    environment:
      DIFY_API_TAG: "1.8.0"
      DIFY_WEB_TAG: "1.8.0"
      DIFY_SANDBOX_TAG: "0.2.12"
      DIFY_PLUGIN_DAEMON_TAG: "0.2.0"   # update to local repository
      WEAVIATE_TAG: "1.19.0"
      REDIS_TAG: "6-alpine"
      POSTGRES_TAG: "15-alpine"
      NGINX_TAG: "latest"
      SQUID_TAG: "latest"
      ECR: "165463520094.dkr.ecr.ap-northeast-1.amazonaws.com"
      ECR_NS: "datahub-brain"
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run: sudo apt-get update && sudo apt-get -y install jq
      - run: pip install --user awscli
      - setup-prd-variables
      - ecr-login
      - run:
          name: Mirror public images to ECR
          command: |
            set -euo pipefail
            mirror () {
              SRC="$1"; DST="$2"
              echo "Pull $SRC"
              docker pull "$SRC"
              echo "Tag  $SRC -> $DST"
              docker tag "$SRC" "$DST"
              echo "Push $DST"
              docker push "$DST"
            }

            # Dify core
            mirror "langgenius/dify-api:${DIFY_API_TAG}"              "${ECR}/${ECR_NS}:dify-api"
            mirror "langgenius/dify-web:${DIFY_WEB_TAG}"              "${ECR}/${ECR_NS}:dify-web"
            mirror "langgenius/dify-sandbox:${DIFY_SANDBOX_TAG}"      "${ECR}/${ECR_NS}:dify-sandbox"
            mirror "langgenius/dify-plugin-daemon:${DIFY_PLUGIN_DAEMON_TAG}" "${ECR}/${ECR_NS}:dify-plugin-daemon"

            # Infra
            mirror "postgres:${POSTGRES_TAG}"                         "${ECR}/${ECR_NS}:dify-postgres"
            mirror "redis:${REDIS_TAG}"                               "${ECR}/${ECR_NS}:dify-redis"
            mirror "nginx:${NGINX_TAG}"                               "${ECR}/${ECR_NS}:dify-nginx"
            mirror "ubuntu/squid:${SQUID_TAG}"                        "${ECR}/${ECR_NS}:dify-ssrf-proxy"
            mirror "semitechnologies/weaviate:${WEAVIATE_TAG}"        "${ECR}/${ECR_NS}:dify-weaviate"

            echo "All images mirrored to ${ECR}/${ECR_NS}: dify-*"

  deploy:
    executor: kubernetes
    resource_class: large
    steps:
      - checkout
      - run:
          name: Configure kubectl
          command: |
            aws eks update-kubeconfig --name common-0 --region ap-northeast-1
      - run:
          name: Apply kustomize
          command: |
            kustomize build ./kubernetes/prd | kubectl apply -f -
      - run:
          name: Wait for rollouts
          when: always
          command: |
            set -e
            for d in api worker worker-beat web db redis sandbox plugin-daemon ssrf-proxy nginx weaviate; do
              kubectl -n dataplatform rollout status deploy/dify-$d --timeout=180s || true
            done

workflows:
  version: 2
  deploy:
    jobs:
      - build-image-approval:
          type: approval
          filters:
            branches:
              only:
                - main
      - mirror-images:
          requires:
            - build-image-approval
      - deploy:
          requires:
            - mirror-images
